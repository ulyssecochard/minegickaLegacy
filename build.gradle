plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'java'

    // Refactor & qualitÃƒÂ©
    id 'org.openrewrite.rewrite' version '7.16.0'
    id 'net.ltgt.errorprone'     version '4.0.1'
    id 'com.diffplug.spotless'   version '6.25.0'
}

version = mod_version
group   = mod_group_id

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    modularity.inferModulePath = false
}

repositories {
    mavenCentral()
}

minecraft {
    // Mappings (pris depuis gradle.properties)
    mappings channel: mapping_channel, version: mapping_version

    // Copie des resources IDE (recommandÃƒÂ©)
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            // Active les GameTests pour TON modid
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            args '--mod', mod_id,
                 '--all',
                 '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Inclure la gÃƒÂ©nÃƒÂ©ration de donnÃƒÂ©es dans les resources du main
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Version prise depuis gradle.properties (minecraft_version, forge_version)
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Error Prone (activÃƒÂ© plus bas)
    errorprone "com.google.errorprone:error_prone_core:2.26.1"
}

def useErrorProne = !project.hasProperty('disableErrorprone')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // Laisse Gradle/JDK gÃƒÂ©rer le bytecode pour 17 via toolchain; release reste utile pour lint
    options.release = 17

    // Active Error Prone (désactivable via -PdisableErrorprone)
    options.errorprone.enabled = useErrorProne
    // Quand tu auras des rÃƒÂ¨gles Refaster, dÃƒÂ©-commente :
    // options.errorprone.errorproneArgs += ["-XepPatchChecks:Refaster", "-XepPatchLocation:IN_PLACE"]
}

// Remplacement des placeholders dans mods.toml / pack.mcmeta
tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            forge_version           : forge_version,
            forge_version_range     : forge_version_range,
            loader_version_range    : loader_version_range,

            mod_id          : mod_id,
            mod_name        : mod_name,
            mod_license     : mod_license,
            mod_version     : mod_version,
            mod_authors     : mod_authors,
            mod_description : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

// Jar manifest (optionnel mais utile)
jar {
    manifest {
        attributes([
            'Specification-Title'     : mod_name,
            'Specification-Vendor'    : mod_authors,
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.jar.archiveVersion,
            'Implementation-Vendor'   : mod_authors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Publication simple (optionnelle)
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "localBuilds"
            url = layout.buildDirectory.dir("repo")
        }
    }
}

/* ---------- OUTILS DE REFACTOR ---------- */

// OpenRewrite: recettes par BOM + migrate-java; active ta recette locale depuis rewrite.yml
dependencies {
    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.15.0"))
    rewrite("org.openrewrite.recipe:rewrite-migrate-java")
}
rewrite {
    activeRecipe("minegicka.port.v1")
}

// Spotless: formatage Java unifiÃƒÂ© (utilisÃƒÂ© aussi par lÃ¢â‚¬â„¢IA cÃƒÂ´tÃƒÂ© VS Code/IntelliJ)
spotless {
    java {
        googleJavaFormat()
        target 'src/**/*.java'
    }
}
